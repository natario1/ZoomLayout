apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'org.jetbrains.dokka-android'

// Required by bintray
// archivesBaseName is required if artifactId is different from gradle module name
// or you can add baseName to each archive task (sources, javadoc, aar)
version = '1.4.0'
group = 'com.otaliastudios'
archivesBaseName = 'zoomlayout'

android {

    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "0.1"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    api "androidx.annotation:annotation:1.0.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.1"
}


install {
    repositories.mavenInstaller {
        pom.project {
            name 'ZoomLayout'
            description 'A View container that supports zooming and panning of View hierarchies and more.'
            url 'https://github.com/natario1/ZoomLayout'

            packaging 'aar'
            groupId project.group
            artifactId 'zoomlayout'
            version project.version

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
            scm {
                connection 'https://github.com/natario1/ZoomLayout.git'
                developerConnection 'https://github.com/natario1/ZoomLayout.git'
                url 'https://github.com/natario1/ZoomLayout'

            }
            developers {
                developer {
                    id = 'natario'
                    name 'Natario'
                }
            }
        }
    }
}

def bintrayUser
def bintrayKey
def hasBintray = false
if (System.getenv('TRAVIS') == 'true') {
    if (System.getenv('TRAVIS_SECURE_ENV_VARS') == 'true') {
        bintrayUser = System.getenv("BINTRAY_USER")
        bintrayKey = System.getenv("BINTRAY_KEY")
        hasBintray = true
    }
} else {
    Properties props = new Properties()
    props.load(project.rootProject.file('local.properties').newDataInputStream())
    bintrayUser = props.getProperty('bintray.user')
    bintrayKey = props.get('bintray.key')
    hasBintray = true
}

if (hasBintray) {
    bintray {
        // https://github.com/bintray/gradle-bintray-plugin
        user = bintrayUser
        key = bintrayKey
        configurations = ['archives']
        pkg {
            repo = 'android'
            name = 'ZoomLayout'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/natario1/ZoomLayout.git'
            publish = true
            override = true
            version {
                name = project.version
                desc = 'ZoomLayout v. '+project.version
                released = new Date()
                vcsTag = 'v'+project.version
            }
        }
    }
}


// From official sample https://github.com/bintray/bintray-examples/blob/master/gradle-aar-example/build.gradle
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += project.files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
    project.android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            classpath += files(variant.javaCompile.classpath)
        }
    }
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/internal/**'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task dokkaJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from dokka.outputDirectory
}

artifacts {
    archives dokkaJar
    archives sourcesJar
}
repositories {
    mavenCentral()
}

// export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home
// To deploy ./gradlew bintrayUpload
